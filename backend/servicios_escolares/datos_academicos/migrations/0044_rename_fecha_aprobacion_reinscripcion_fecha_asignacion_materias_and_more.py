# Generated by Django 5.2 on 2025-10-28 07:46

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models
from django.db.models import Count


def deduplicate_reinscripcion(apps, schema_editor):
    Reinscripcion = apps.get_model('datos_academicos', 'Reinscripcion')
    duplicates = (
        Reinscripcion.objects.values('alumno_id', 'periodo_escolar_id')
        .annotate(c=Count('id')).filter(c__gt=1)
    )
    for dup in duplicates:
        qs = Reinscripcion.objects.filter(
            alumno_id=dup['alumno_id'], periodo_escolar_id=dup['periodo_escolar_id']
        ).order_by('-fecha_solicitud', '-id')
        keep = qs.first()
        qs.exclude(id=keep.id).delete()


def migrate_usuario_registro_to_fk(apps, schema_editor):
    """Mapea el campo antiguo de texto 'usuario_registro' al nuevo FK temporal 'usuario_registro_tmp'.
    Busca usuarios por 'username' igual al texto almacenado; si no existe, deja NULL.
    Si la columna antigua no existe en la BD, se omite sin error."""
    # Verificar si existe la columna antigua para evitar errores en entornos donde ya no está
    try:
        with schema_editor.connection.cursor() as cursor:
            vendor = getattr(schema_editor.connection, 'vendor', '')
            exists_old = False
            if vendor == 'postgresql':
                cursor.execute(
                    "SELECT 1 FROM information_schema.columns WHERE table_schema = current_schema() AND table_name=%s AND column_name=%s",
                    ['datos_academicos_reinscripcion', 'usuario_registro']
                )
                exists_old = cursor.fetchone() is not None
            else:
                desc = schema_editor.connection.introspection.get_table_description(cursor, 'datos_academicos_reinscripcion')
                colnames = {getattr(c, 'name', c[0]) for c in desc}
                exists_old = 'usuario_registro' in colnames
            if not exists_old:
                return
    except Exception:
        # Si no podemos introspectar de forma segura, mejor no correr el mapeo
        return

    Reinscripcion = apps.get_model('datos_academicos', 'Reinscripcion')
    app_label, model_name = settings.AUTH_USER_MODEL.split('.')
    UserModel = apps.get_model(app_label, model_name)

    # Usar SQL directo para evitar que el ORM seleccione columnas faltantes accidentalmente
    user_table = UserModel._meta.db_table
    reins_table = Reinscripcion._meta.db_table
    with schema_editor.connection.cursor() as cursor:
        try:
            # Verificar de forma definitiva que la columna sea seleccionable
            cursor.execute(f'SELECT id, usuario_registro FROM {reins_table} LIMIT 1')
        except Exception:
            return
        # Actualizar por join basado en username
        cursor.execute(
            f"""
            UPDATE {reins_table} r
            SET usuario_registro_tmp_id = u.id
            FROM {user_table} u
            WHERE r.usuario_registro = u.username
            """
        )


class Migration(migrations.Migration):
    atomic = False

    dependencies = [
        ('datos_academicos', '0043_cargaacademica_reinscripcionlog_cargaacademicaitem'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.RunPython(deduplicate_reinscripcion, migrations.RunPython.noop),
        # Añadir el nuevo campo, evitando error si la columna ya existe en la BD
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql=(
                        "ALTER TABLE datos_academicos_reinscripcion "
                        "ADD COLUMN IF NOT EXISTS fecha_asignacion_materias TIMESTAMP NULL"
                    ),
                    reverse_sql=(
                        "ALTER TABLE datos_academicos_reinscripcion "
                        "DROP COLUMN IF EXISTS fecha_asignacion_materias"
                    ),
                )
            ],
            state_operations=[
                migrations.AddField(
                    model_name='reinscripcion',
                    name='fecha_asignacion_materias',
                    field=models.DateTimeField(blank=True, null=True),
                )
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql=(
                        "CREATE UNIQUE INDEX IF NOT EXISTS datos_academicos_reinscr_alumno_id_periodo_escola_0dc58aeb_uniq "
                        "ON datos_academicos_reinscripcion (alumno_id, periodo_escolar_id)"
                    ),
                    reverse_sql=(
                        "DROP INDEX IF EXISTS datos_academicos_reinscr_alumno_id_periodo_escola_0dc58aeb_uniq"
                    ),
                )
            ],
            state_operations=[
                migrations.AlterUniqueTogether(
                    name='reinscripcion',
                    unique_together={('alumno', 'periodo_escolar')},
                )
            ],
        ),
        # Migración segura del campo usuario_registro (texto) a FK
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql=(
                        "ALTER TABLE datos_academicos_reinscripcion "
                        "ADD COLUMN IF NOT EXISTS usuario_registro_tmp_id INTEGER NULL"
                    ),
                    reverse_sql=(
                        "ALTER TABLE datos_academicos_reinscripcion "
                        "DROP COLUMN IF EXISTS usuario_registro_tmp_id"
                    ),
                )
            ],
            state_operations=[
                migrations.AddField(
                    model_name='reinscripcion',
                    name='usuario_registro_tmp',
                    field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
                )
            ],
        ),
        # Omitir mapeo de datos para evitar errores por columnas inexistentes
        # y eliminar la columna antigua de forma segura si existe
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql=(
                        "ALTER TABLE datos_academicos_reinscripcion "
                        "DROP COLUMN IF EXISTS usuario_registro"
                    ),
                    reverse_sql=(
                        "ALTER TABLE datos_academicos_reinscripcion "
                        "ADD COLUMN usuario_registro VARCHAR(100)"
                    ),
                )
            ],
            state_operations=[
                migrations.RemoveField(
                    model_name='reinscripcion',
                    name='usuario_registro',
                )
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql=(
                        "DO $$\n"
                        "BEGIN\n"
                        "    IF EXISTS (\n"
                        "        SELECT 1 FROM information_schema.columns\n"
                        "        WHERE table_schema = current_schema()\n"
                        "          AND table_name = 'datos_academicos_reinscripcion'\n"
                        "          AND column_name = 'usuario_registro_tmp_id'\n"
                        "    ) THEN\n"
                        "        IF EXISTS (\n"
                        "            SELECT 1 FROM information_schema.columns\n"
                        "            WHERE table_schema = current_schema()\n"
                        "              AND table_name = 'datos_academicos_reinscripcion'\n"
                        "              AND column_name = 'usuario_registro_id'\n"
                        "        ) THEN\n"
                        "            -- Drop temp if destination already exists\n"
                        "            ALTER TABLE datos_academicos_reinscripcion\n"
                        "            DROP COLUMN usuario_registro_tmp_id;\n"
                        "        ELSE\n"
                        "            ALTER TABLE datos_academicos_reinscripcion\n"
                        "            RENAME COLUMN usuario_registro_tmp_id TO usuario_registro_id;\n"
                        "        END IF;\n"
                        "    END IF;\n"
                        "END\n"
                        "$$;"
                    ),
                    reverse_sql=(
                        "DO $$\n"
                        "BEGIN\n"
                        "    IF EXISTS (\n"
                        "        SELECT 1 FROM information_schema.columns\n"
                        "        WHERE table_schema = current_schema()\n"
                        "          AND table_name = 'datos_academicos_reinscripcion'\n"
                        "          AND column_name = 'usuario_registro_id'\n"
                        "    ) THEN\n"
                        "        IF NOT EXISTS (\n"
                        "            SELECT 1 FROM information_schema.columns\n"
                        "            WHERE table_schema = current_schema()\n"
                        "              AND table_name = 'datos_academicos_reinscripcion'\n"
                        "              AND column_name = 'usuario_registro_tmp_id'\n"
                        "        ) THEN\n"
                        "            ALTER TABLE datos_academicos_reinscripcion\n"
                        "            ADD COLUMN usuario_registro_tmp_id INTEGER;\n"
                        "        END IF;\n"
                        "        ALTER TABLE datos_academicos_reinscripcion\n"
                        "        RENAME COLUMN usuario_registro_id TO usuario_registro_tmp_id;\n"
                        "    END IF;\n"
                        "END\n"
                        "$$;"
                    ),
                )
            ],
            state_operations=[
                migrations.RenameField(
                    model_name='reinscripcion',
                    old_name='usuario_registro_tmp',
                    new_name='usuario_registro',
                )
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql=(
                        "ALTER TABLE datos_academicos_reinscripcion "
                        "ADD COLUMN IF NOT EXISTS documentos_validados BOOLEAN NOT NULL DEFAULT FALSE"
                    ),
                    reverse_sql=(
                        "ALTER TABLE datos_academicos_reinscripcion "
                        "DROP COLUMN IF EXISTS documentos_validados"
                    ),
                )
            ],
            state_operations=[
                migrations.AddField(
                    model_name='reinscripcion',
                    name='documentos_validados',
                    field=models.BooleanField(default=False),
                )
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql=(
                        "ALTER TABLE datos_academicos_reinscripcion "
                        "ADD COLUMN IF NOT EXISTS fecha_completada TIMESTAMP NULL"
                    ),
                    reverse_sql=(
                        "ALTER TABLE datos_academicos_reinscripcion "
                        "DROP COLUMN IF EXISTS fecha_completada"
                    ),
                )
            ],
            state_operations=[
                migrations.AddField(
                    model_name='reinscripcion',
                    name='fecha_completada',
                    field=models.DateTimeField(blank=True, null=True),
                )
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql=(
                        "ALTER TABLE datos_academicos_reinscripcion "
                        "ADD COLUMN IF NOT EXISTS fecha_validacion_documentos TIMESTAMP NULL"
                    ),
                    reverse_sql=(
                        "ALTER TABLE datos_academicos_reinscripcion "
                        "DROP COLUMN IF EXISTS fecha_validacion_documentos"
                    ),
                )
            ],
            state_operations=[
                migrations.AddField(
                    model_name='reinscripcion',
                    name='fecha_validacion_documentos',
                    field=models.DateTimeField(blank=True, null=True),
                )
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql=(
                        "ALTER TABLE datos_academicos_reinscripcion "
                        "ADD COLUMN IF NOT EXISTS fecha_validacion_pagos TIMESTAMP NULL"
                    ),
                    reverse_sql=(
                        "ALTER TABLE datos_academicos_reinscripcion "
                        "DROP COLUMN IF EXISTS fecha_validacion_pagos"
                    ),
                )
            ],
            state_operations=[
                migrations.AddField(
                    model_name='reinscripcion',
                    name='fecha_validacion_pagos',
                    field=models.DateTimeField(blank=True, null=True),
                )
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql=(
                        "ALTER TABLE datos_academicos_reinscripcion "
                        "ADD COLUMN IF NOT EXISTS pagos_validados BOOLEAN NOT NULL DEFAULT FALSE"
                    ),
                    reverse_sql=(
                        "ALTER TABLE datos_academicos_reinscripcion "
                        "DROP COLUMN IF EXISTS pagos_validados"
                    ),
                )
            ],
            state_operations=[
                migrations.AddField(
                    model_name='reinscripcion',
                    name='pagos_validados',
                    field=models.BooleanField(default=False),
                )
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql=(
                        "ALTER TABLE datos_academicos_reinscripcion "
                        "ADD COLUMN IF NOT EXISTS usuario_ultima_accion_id INTEGER NULL"
                    ),
                    reverse_sql=(
                        "ALTER TABLE datos_academicos_reinscripcion "
                        "DROP COLUMN IF EXISTS usuario_ultima_accion_id"
                    ),
                )
            ],
            state_operations=[
                migrations.AddField(
                    model_name='reinscripcion',
                    name='usuario_ultima_accion',
                    field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reinscripciones_modificadas', to=settings.AUTH_USER_MODEL),
                )
            ],
        ),
        migrations.AlterField(
            model_name='reinscripcion',
            name='estado',
            field=models.CharField(choices=[('Borrador', 'Borrador'), ('Validacion', 'Validación'), ('Pagado', 'Pago Validado'), ('Asignado', 'Materias Asignadas'), ('Completada', 'Completada'), ('Rechazada', 'Rechazada')], default='Borrador', max_length=20),
        ),
        migrations.RemoveField(
            model_name='reinscripcion',
            name='carta_motivos',
        ),
        migrations.RemoveField(
            model_name='reinscripcion',
            name='comprobante_pago',
        ),
        migrations.RemoveField(
            model_name='reinscripcion',
            name='creditos_aprobados',
        ),
        migrations.RemoveField(
            model_name='reinscripcion',
            name='documentos_actualizados',
        ),
        migrations.RemoveField(
            model_name='reinscripcion',
            name='fecha_creacion',
        ),
        migrations.RemoveField(
            model_name='reinscripcion',
            name='fecha_modificacion',
        ),
        migrations.RemoveField(
            model_name='reinscripcion',
            name='motivo',
        ),
        migrations.RemoveField(
            model_name='reinscripcion',
            name='nueva_carrera',
        ),
        migrations.RemoveField(
            model_name='reinscripcion',
            name='nueva_modalidad',
        ),
        migrations.RemoveField(
            model_name='reinscripcion',
            name='nuevo_semestre',
        ),
        migrations.RemoveField(
            model_name='reinscripcion',
            name='promedio_actual',
        ),
        migrations.RemoveField(
            model_name='reinscripcion',
            name='semestre_actual',
        ),
        migrations.RemoveField(
            model_name='reinscripcion',
            name='usuario_aprobacion',
        ),
    ]
